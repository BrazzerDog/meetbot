import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ..keyboards.keyboards import get_gender_keyboard, get_location_keyboard, get_profile_settings_keyboard, get_main_keyboard
from ..services.user_service import UserService
from ..models.models import Gender
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
import asyncio
import json
import os

router = Router()
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
with open(os.path.join('src', 'database', 'russian-cities.json'), 'r', encoding='utf-8') as f:
    RUSSIAN_CITIES = json.load(f)
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    CITIES_DICT = {city['name'].lower(): city for city in RUSSIAN_CITIES}

class RegistrationStates(StatesGroup):
    waiting_name = State()
    waiting_age = State()
    waiting_gender = State()
    waiting_preferred_gender = State()
    waiting_photo = State()
    waiting_bio = State()
    waiting_location = State()
    waiting_city = State()
    waiting_preferences = State()

def get_skip_location_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True),
                KeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é")
            ]
        ],
        resize_keyboard=True
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
gender_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π"),
            KeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π")
        ]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞
preferred_gender_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üîç –ò—â—É –º—É–∂—á–∏–Ω—É"),
            KeyboardButton(text="üîç –ò—â—É –∂–µ–Ω—â–∏–Ω—É")
        ],
        [
            KeyboardButton(text="üîç –ò—â—É –≤—Å–µ—Ö")
        ]
    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    user_service = UserService()
    user = await user_service.get_user_by_tg_id(message.from_user.id)
    
    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å
        profile_text = [
            f"üë§ {user.name}, {user.age}",
            f"üìç {user.city}" if user.city else "",
            f"üìù {user.bio}" if user.bio else "",
            f"üëÄ {'–í–∏–¥–∏–º—ã–π' if user.is_visible else '–°–∫—Ä—ã—Ç—ã–π'} –ø—Ä–æ—Ñ–∏–ª—å",
            "",
            "üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:",
            f"üë• –ü–æ–ª: {user.preferred_gender.value if user.preferred_gender else '–ù–µ —É–∫–∞–∑–∞–Ω'}",
            f"üìè –í–æ–∑—Ä–∞—Å—Ç: {user.min_age}-{user.max_age}",
            f"üìç –ú–∞–∫—Å. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {user.max_distance}–∫–º"
        ]

        profile_text = "\n".join(line for line in profile_text if line)

        if user.photos:
            await message.answer_photo(
                photo=user.photos[0].file_id,
                caption=profile_text,
                reply_markup=get_profile_settings_keyboard()
            )
        else:
            await message.answer(
                profile_text,
                reply_markup=get_profile_settings_keyboard()
            )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await state.clear()  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(RegistrationStates.waiting_name)
    await message.answer(
        "üíñ –ü—Ä–∏–≤–µ–µ–µ—Ç! –ö–∞–∫ –∂–µ –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç—ã –∫ –Ω–∞–º –∑–∞–≥–ª—è–Ω—É–ª(–∞)! ü§ó\n\n"
        "üå∏ –ú—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–æ —É—é—Ç–Ω–æ–µ –º–µ—Å—Ç–µ—á–∫–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–∞–∫–∏–º –∫–ª–∞—Å—Å–Ω—ã–º –ª—é–¥—è–º –∫–∞–∫ —Ç—ã "
        "–Ω–∞–π—Ç–∏ —Å–≤–æ—é –ª—é–±–æ–≤—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ üí´\n\n"
        "‚ù§Ô∏è –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ü•∞"
    )

@router.callback_query(lambda c: c.data == "restart_registration")
async def restart_registration(callback: CallbackQuery, state: FSMContext):
    user_service = UserService()
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await user_service.delete_user_by_tg_id(callback.from_user.id)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
    await state.set_state(RegistrationStates.waiting_name)
    await callback.message.answer("üëã –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await callback.answer()

@router.callback_query(lambda c: c.data == "cancel_restart")
async def cancel_restart(callback: CallbackQuery):
    await callback.message.answer("–•–æ—Ä–æ—à–æ, –≤–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ /profile –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.")
    await callback.answer()

@router.message(RegistrationStates.waiting_name)
async def process_name(message: Message, state: FSMContext):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if len(message.text) < 2:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(name=message.text)
    await state.set_state(RegistrationStates.waiting_age)
    await message.answer("üéà –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è! –ê —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n"
        "üí´ –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ª—é–¥–µ–π —Ç–≤–æ–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞")

@router.message(RegistrationStates.waiting_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 18 or age > 100:
            await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        await state.update_data(age=age)
        await state.set_state(RegistrationStates.waiting_gender)
        await message.answer(
            "üå∫ –£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –ø–æ–ª:\n"
            "üí´ –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞",
            reply_markup=gender_kb
        )
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º:")

@router.message(RegistrationStates.waiting_gender)
async def process_gender(message: Message, state: FSMContext):
    gender_text = message.text.lower()
    
    if "–º—É–∂—Å–∫–æ–π" in gender_text:
        gender = Gender.MALE
    elif "–∂–µ–Ω—Å–∫–∏–π" in gender_text:
        gender = Gender.FEMALE
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_kb)
        return
        
    await state.update_data(gender=gender)
    await state.set_state(RegistrationStates.waiting_preferred_gender)
    await message.answer(
        "üîç –ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?",
        reply_markup=preferred_gender_kb
    )

@router.message(RegistrationStates.waiting_preferred_gender)
async def process_preferred_gender(message: Message, state: FSMContext):
    gender_text = message.text.lower()
    
    if "–∏—â—É –º—É–∂—á–∏–Ω—É" in gender_text:
        preferred_gender = Gender.MALE
    elif "–∏—â—É –∂–µ–Ω—â–∏–Ω—É" in gender_text:
        preferred_gender = Gender.FEMALE
    elif "–∏—â—É –≤—Å–µ—Ö" in gender_text:
        preferred_gender = None  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–∫–∞—Ç—å –≤—Å–µ—Ö
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:",
            reply_markup=preferred_gender_kb
        )
        return
        
    await state.update_data(preferred_gender=preferred_gender)
    await state.set_state(RegistrationStates.waiting_photo)
    await message.answer(
        "‚ú® –ê —Ç–µ–ø–µ—Ä—å —Å–∞–º—ã–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç! üé®\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å –Ω–∞–º —Å–≤–æ—é —Å–∞–º—É—é –∫–ª–∞—Å—Å–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!\n"
        "üí´ –ü—É—Å—Ç—å –≤—Å–µ —É–≤–∏–¥—è—Ç —Ç–≤–æ—é –∏—Å–∫—Ä–µ–Ω–Ω—é—é —É–ª—ã–±–∫—É –∏ –æ—Å–æ–±–µ–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É üåü\n"
        "üíù –ü.–°. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç–ª–∏—á–Ω—ã–π —Å–Ω–∏–º–æ–∫! ü§ó",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(RegistrationStates.waiting_photo)
async def process_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")
        return

    photo = message.photo[-1]
    await state.update_data(photo=photo.file_id)
    
    await state.set_state(RegistrationStates.waiting_bio)
    await message.answer(
        "üåà –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ! üí´\n\n"
        "üí≠ –ß–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è? –û —á—ë–º –º–µ—á—Ç–∞–µ—à—å?\n"
        "üéØ –ö–æ–≥–æ —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å?\n"
        "‚ú® –ü–æ–¥–µ–ª–∏—Å—å –≤—Å–µ–º, —á—Ç–æ —Å—á–∏—Ç–∞–µ—à—å –≤–∞–∂–Ω—ã–º! üíù"
    )

@router.message(RegistrationStates.waiting_bio)
async def process_bio(message: Message, state: FSMContext):
    try:
        bio_text = message.text.strip()
        
        if len(bio_text) > 500:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(bio=bio_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≥–æ—Ä–æ–¥–∞
        await state.set_state(RegistrationStates.waiting_city)
        await message.answer(
            "üèôÔ∏è –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤—ë—à—å? üí´\n\n"
            "üíù –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏!\n"
            "üåü –ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏–ª–∏ –ö–∞–∑–∞–Ω—å ü§ó"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–æ: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑:")

@router.message(RegistrationStates.waiting_city)
async def process_city(message: Message, state: FSMContext):
    try:
        city_name = message.text.strip()
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞: {city_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await state.get_data()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {user_data}")
        
        if not user_data:
            logger.error("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start"
            )
            await state.clear()
            return

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥–µ—Ä
        try:
            search_query = f"{city_name}, –†–æ—Å—Å–∏—è"
            geolocator = Nominatim(user_agent="meetbot", timeout=10)
            location = geolocator.geocode(search_query, language='ru')
            
            if location:
                lat, lon = location.latitude, location.longitude
                logger.info(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥–µ—Ä: {lat}, {lon}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data.update({
                    'tg_id': message.from_user.id,
                    'username': message.from_user.username,
                    'location_lat': lat,
                    'location_lon': lon,
                    'city': city_name,
                    'is_visible': True
                })
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_service = UserService()
                user = await user_service.create_user(user_data)
                
                if user:
                    await state.clear()
                    await message.answer(
                        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                        f"–í–∞—à –≥–æ—Ä–æ–¥: {city_name}",
                        reply_markup=get_main_keyboard()
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
            else:
                # –ï—Å–ª–∏ –≥–µ–æ–∫–æ–¥–µ—Ä –Ω–µ –Ω–∞—à–µ–ª –≥–æ—Ä–æ–¥
                await message.answer(
                    "üèô –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ö–∞–∑–∞–Ω—å"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ"
            )
            await state.clear()
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ä–æ–¥–∞: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ"
        )
        await state.clear()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
        )
