from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from ..models.models import User, Gender, Photo
from ..services.user_service import UserService
from ..keyboards.keyboards import get_profile_settings_keyboard, get_main_keyboard
from ..states.states import ProfileStates
from geopy.geocoders import Nominatim
from sqlalchemy import delete
from typing import Optional
import logging
from aiogram.exceptions import TelegramBadRequest

router = Router()
logger = logging.getLogger(__name__)

def format_profile_text(user: User) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    def format_gender(gender: Gender) -> str:
        return "–ú—É–∂—Å–∫–æ–π" if gender == Gender.MALE else "–ñ–µ–Ω—Å–∫–∏–π"

    profile_text = [
        f"üë§ {user.name}, {user.age}",
        f"üë• –ü–æ–ª: {format_gender(user.gender)}",
        f"üìç {user.city}" if user.city else "",
        f"üìù {user.bio}" if user.bio else "",
        f"{'üò¥ –°–ø—è—â–∏–π' if not user.is_visible else 'üëÄ –ê–∫—Ç–∏–≤–Ω—ã–π'} –ø—Ä–æ—Ñ–∏–ª—å",
    ]

    return "\n".join(line for line in profile_text if line)

async def show_profile(message: Message, user_service: UserService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await user_service.get_user_by_tg_id(message.from_user.id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        profile_text = format_profile_text(user)
        
        if user.photos:
            await message.answer_photo(
                photo=user.photos[0].file_id,
                caption=profile_text,
                reply_markup=get_profile_settings_keyboard(user.is_visible)
            )
        else:
            await message.answer(
                profile_text,
                reply_markup=get_profile_settings_keyboard(user.is_visible)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("profile"))
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile(message: Message):
    user_service = UserService()
    await show_profile(message, user_service)

@router.callback_query(lambda c: c.data == "edit_photo")
async def edit_photo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã:")
    await state.set_state(ProfileStates.waiting_new_photo)
    await callback.answer()

@router.callback_query(lambda c: c.data == "edit_name")
async def edit_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(ProfileStates.waiting_new_name)
    await callback.answer()

@router.callback_query(lambda c: c.data == "edit_age")
async def edit_age(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100):")
    await state.set_state(ProfileStates.waiting_new_age)
    await callback.answer()

@router.callback_query(lambda c: c.data == "edit_bio")
async def edit_bio(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(ProfileStates.waiting_new_bio)
    await callback.answer()

@router.callback_query(lambda c: c.data == "edit_city")
async def edit_city(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ö–∞–∑–∞–Ω—å"
    )
    await state.set_state(ProfileStates.waiting_new_city)
    await callback.answer()

@router.callback_query(lambda c: c.data == "toggle_visibility_sleep")
async def handle_sleep(callback: CallbackQuery):
    await callback.message.answer(
        "üí´ –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è –∏–∑–º–µ–Ω—ë–Ω!\n"
        "üåô –¢–µ–ø–µ—Ä—å —Ç—ã –æ—Ç–¥—ã—Ö–∞–µ—à—å, –Ω–æ –≤—Å—ë –µ—â—ë –º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö"
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ "–ü—Ä–æ—Å–Ω—É—Ç—å—Å—è"
    new_keyboard = get_profile_settings_keyboard(is_visible=False)
    await callback.message.edit_reply_markup(reply_markup=new_keyboard)
    await callback.answer()

@router.callback_query(lambda c: c.data == "toggle_visibility_wake")
async def handle_wake(callback: CallbackQuery):
    await callback.message.answer(
        "üåü –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫! ‚ú®\n"
        "üíù –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–µ–±–µ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞! ü•∞"
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ "–°–ø–∞—Ç—å"
    new_keyboard = get_profile_settings_keyboard(is_visible=True)
    await callback.message.edit_reply_markup(reply_markup=new_keyboard)
    await callback.answer()

@router.message(ProfileStates.waiting_new_photo, F.photo)
async def process_new_photo(message: Message, state: FSMContext):
    try:
        user_service = UserService()
        user = await user_service.get_user_by_tg_id(message.from_user.id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        photo = message.photo[-1]
        success = await user_service.update_photo(user.id, photo.file_id)
        
        if success:
            await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await show_profile(message, user_service)
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ")
            
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(ProfileStates.waiting_new_name)
async def process_new_name(message: Message, state: FSMContext):
    try:
        name = message.text.strip()
        if len(name) < 2 or len(name) > 50:
            await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        user_service = UserService()
        user = await user_service.get_user_by_tg_id(message.from_user.id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        updated_user = await user_service.update_user(user.id, {"name": name})
        if updated_user:
            await message.answer("‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await show_profile(message, user_service)
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è")
            
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(ProfileStates.waiting_new_age)
async def process_new_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 18 or age > 100:
            await message.answer("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        user_service = UserService()
        user = await user_service.get_user_by_tg_id(message.from_user.id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        updated_user = await user_service.update_user(user.id, {"age": age})
        if updated_user:
            await message.answer("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            await show_profile(message, user_service)
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç")
            
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(ProfileStates.waiting_new_bio)
async def process_new_bio(message: Message, state: FSMContext):
    try:
        bio = message.text.strip()
        if len(bio) > 500:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        user_service = UserService()
        user = await user_service.get_user_by_tg_id(message.from_user.id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        updated_user = await user_service.update_user(user.id, {"bio": bio})
        if updated_user:
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await show_profile(message, user_service)
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
            
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(ProfileStates.waiting_new_city)
async def process_new_city(message: Message, state: FSMContext):
    try:
        city_name = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ–æ–¥–∞
        search_query = f"{city_name}, –†–æ—Å—Å–∏—è"
        geolocator = Nominatim(user_agent="meetbot", timeout=10)
        location = geolocator.geocode(search_query, language='ru')
        
        if location:
            user_service = UserService()
            user = await user_service.get_user_by_tg_id(message.from_user.id)
            if not user:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return

            updated_user = await user_service.update_user(user.id, {
                "city": city_name,
                "location_lat": location.latitude,
                "location_lon": location.longitude
            })
            
            if updated_user:
                await message.answer("‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                await show_profile(message, user_service)
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥")
        else:
            await message.answer(
                "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ö–∞–∑–∞–Ω—å"
            )
            
        await state.clear()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
