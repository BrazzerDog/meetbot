from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from ..services.matching import MatchingService
from ..services.user_service import UserService
from ..keyboards.keyboards import get_profile_actions_keyboard, get_main_keyboard
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("search"))
@router.message(F.text == "üöÄ –ù–∞ –≤—Å—Ç—Ä–µ—á—É!")
async def cmd_search(message: Message):
    try:
        user_service = UserService()
        matching_service = MatchingService()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user_by_tg_id(message.from_user.id)
        
        if not user:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
                reply_markup=ReplyKeyboardRemove()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        candidate = await matching_service.get_next_candidate(user.id)
        
        if not candidate:
            await message.answer(
                "‚ú® –ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç, –Ω–æ –Ω–µ –≥—Ä—É—Å—Ç–∏!\n"
                "üåü –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏ –∫ –Ω–∞–º —á—É—Ç—å –ø–æ–∑–∂–µ\n"
                "üí´ –ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è!",
                reply_markup=get_main_keyboard()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
        profile_text = format_profile_text(candidate)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É
        if candidate.photos:
            await message.answer_photo(
                photo=candidate.photos[0].file_id,
                caption=profile_text,
                reply_markup=get_profile_actions_keyboard(candidate.id)
            )
        else:
            await message.answer(
                profile_text,
                reply_markup=get_profile_actions_keyboard(candidate.id)
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∫–µ—Ç: {str(e)}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∫–µ—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_keyboard()
        )

@router.callback_query(F.data.startswith("profile:"))
async def process_profile_action(callback: CallbackQuery):
    action, profile_id = callback.data.split(':')[1:]
    matching_service = MatchingService()
    
    if action == "like":
        is_match = await matching_service.create_like(
            from_user_id=callback.from_user.id,
            to_user_id=int(profile_id)
        )
        
        if is_match:
            matched_user = await UserService().get_user(int(profile_id))
            match_text = (
                f"‚ú® –£—Ä–∞! –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {matched_user.name}! üíò\n\n"
                f"üíå –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–º(-–æ–π): @{matched_user.username}\n"
                f"üåü –ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! ü§ó"
            )
            await callback.message.answer(match_text)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    await cmd_search(callback.message)
